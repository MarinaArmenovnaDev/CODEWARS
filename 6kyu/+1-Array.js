// ❓ Если задан массив целых чисел любой длины, вернуть массив, к значению которого добавлена ​​1.

// Если массив недействителен (пустой или содержит отрицательные целые числа или целые числа, содержащие более 1 цифры), верните nil(или эквивалент в вашем языке).

// Примеры
// Допустимые массивы

// [4, 3, 2, 5]вернет [4, 3, 2, 6] (4325 + 1 = 4326)
// [1, 2, 3, 9]вернет [1, 2, 4, 0] (1239 + 1 = 1240)
// [9, 9, 9, 9]вернет [1, 0, 0, 0, 0] (9999 + 1 = 10000)
// [0, 1, 3, 7]вернет [0, 1, 3, 8](0137 + 1 = 0138)
// Недопустимые массивы

// []недействителен, так как он пустой
// [1, -9]недействительно, так как не -9является неотрицательным целым числом
// [1, 2, 33]недействительно, так как не 33является однозначным целым числом

// ✅ SOLUTION:
function upArray(arr) {
    // Проверка на пустой массив
    if (arr.length === 0) {
      return null;
    }
  
    // Проверка на валидность элементов массива
    for (let i = 0; i < arr.length; i++) {
      if (arr[i] < 0 || arr[i] > 9 || !Number.isInteger(arr[i])) {
        return null; // Возвращаем null, если элемент невалидный
      }
    }
  
    // Если массив начинается с нуля, обрабатываем его отдельно
    if (arr[0] === 0) {
      // Находим индекс первого ненулевого элемента
      let firstNonZeroIndex = 0;
      while (arr[firstNonZeroIndex] === 0 && firstNonZeroIndex < arr.length) {
        firstNonZeroIndex++;
      }
  
      // Если все элементы нули, возвращаем [0, 0, ..., 1]
      if (firstNonZeroIndex === arr.length) {
        return new Array(arr.length - 1).fill(0).concat([1]);
      }
  
      // Преобразуем часть массива, начиная с первого ненулевого элемента
      const number = BigInt(arr.slice(firstNonZeroIndex).join("")) + BigInt(1);
      const result = number
        .toString()
        .split("")
        .map((el) => +el);
  
      // Добавляем ведущие нули обратно
      return new Array(firstNonZeroIndex).fill(0).concat(result);
    }
  
    // Если массив не начинается с нуля, обрабатываем как обычно
    const number = BigInt(arr.join("")) + BigInt(1);
    return number
      .toString()
      .split("")
      .map((el) => +el);
  }

